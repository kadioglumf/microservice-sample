server:
  port: 8081
  servlet:
    context-path: /gateway-service

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      redis:
        enabled: false
      routes:
        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/auth-service/**
          filters:
            - name: RequestRateLimiter
              args:
                microservice-sample-redis-rate-limiter.ttl: 60
                microservice-sample-redis-rate-limiter.burstCapacity: 100
                microservice-sample-redis-rate-limiter.requestedTokens: 10
                microservice-sample-redis-rate-limiter.blockedTtl: 300
                microservice-sample-redis-rate-limiter.blockLimit: 5
                key-resolver: "#{@userKeyResolver}"

        - id: data-service
          uri: lb://data-service
          predicates:
            - Path=/data-service/**
          filters:
            - name: RequestRateLimiter
              args:
                microservice-sample-redis-rate-limiter.ttl: 60
                microservice-sample-redis-rate-limiter.burstCapacity: 100
                microservice-sample-redis-rate-limiter.requestedTokens: 10
                microservice-sample-redis-rate-limiter.blockLimit: 5
                key-resolver: "#{@userKeyResolver}"

        - id: email-service
          uri: lb://email-service
          predicates:
            - Path=/email-service/**
          filters:
            - name: RequestRateLimiter
              args:
                microservice-sample-redis-rate-limiter.ttl: 60
                microservice-sample-redis-rate-limiter.burstCapacity: 100
                microservice-sample-redis-rate-limiter.requestedTokens: 10
                microservice-sample-redis-rate-limiter.blockLimit: 5
                key-resolver: "#{@userKeyResolver}"

        - id: scheduler-service
          uri: lb://scheduler-service
          predicates:
            - Path=/scheduler-service/**
          filters:
            - name: RequestRateLimiter
              args:
                microservice-sample-redis-rate-limiter.ttl: 60
                microservice-sample-redis-rate-limiter.burstCapacity: 100
                microservice-sample-redis-rate-limiter.requestedTokens: 10
                microservice-sample-redis-rate-limiter.blockLimit: 5
                key-resolver: "#{@userKeyResolver}"

        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/payment-service/**
          filters:
            - name: RequestRateLimiter
              args:
                microservice-sample-redis-rate-limiter.ttl: 60
                microservice-sample-redis-rate-limiter.burstCapacity: 100
                microservice-sample-redis-rate-limiter.requestedTokens: 10
                microservice-sample-redis-rate-limiter.blockLimit: 5
                key-resolver: "#{@userKeyResolver}"
redis:
  host: localhost
  port: 6379
  password: a4rT44Rce32w87htRft56
  socketTimeout: 400
  commandTimeout: 600
  database: 0

resilience4j:
  circuitbreaker:
    instances:
      rateLimiterCircuitBreaker:
        failureRateThreshold: 1  # Eğer hata oranı %1 bile olsa hemen fallback'e düş
        minimumNumberOfCalls: 1  # İlk hatada devreyi kes
        slidingWindowSize: 5     # Son 5 isteği değerlendir
        waitDurationInOpenState: 10s  # 10 saniye sonra tekrar dene
        permittedNumberOfCallsInHalfOpenState: 1  # 1 istek geçerse tekrar aç
